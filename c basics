/* boiler plate code */ 
// boiler plate code 

//installing gcc on linux 
sudo apt-get install build-essential
create a .c file 
gcc test.c -o test 
./test 

#include <stdio.h> 
#include <stdlib.h> 

int main() {
  puts("hello");
  return 0;
} 

// print formatting 
printf("%d apples and %s is like %f right \n", 5, "bananas", 5.55);


//variables 
int age ;
age = 2021 - 1993 ;
puts(age) ;

//variables 2 
int age = 28;
float weight = 66.77;

//variables 3 
char hello[12] = "hello world";
hello[2] = "h"

//variable 4 
char food[] = "tuna";
strcpy(food, "bacon");


//permanent variables, placed on the top next to include
#define name "zizo"
#define number 55

//importing libraries 
#include <stdio.h> 
#include "local.h"              // user quotes if the file is in the same directory.

//scanning user input 
char hello[20];
scanf("%s", hello); 

//math operation 
math operation work the same as in python.

//converting data type 
float a = 1.1 ;
int b = (int)a; 

//if statement (you can also do nested loops in c) 
if ( 5 < 10) {
  printf("hello");
}

//if else 
if (5 < 10) { 
  print("hello") 
}else{
  print("bye")
}

//else if 
if (10 < 5){
  printf("hello") 
}else if (10> 5) {
  print("hello there");
} else{
  print("no way hozay") 
}

#and statement in c, is used with (and = &&, or = ||) 
int a = 5
int b = 6 
if (a == b) && ( b == a) { 
  printf("exatclty");
}

#shorthand if else
char a = "hans";
(hans[0] < "h") ? printf("red team") : printf("blue team") 

//while loops 
int a = 1;
while (a < 5) {
  puts("hello") ;
  a+;
} 

// do while loop
int a = 1;
do {
  a += 1; 
}while(a < 5);

//for loop 
for (tuna = 1; tuna < 10; tuna++){
  printf("hello \n") 
} 

//break statement
int number;
for(number = 1; number < 10; number++){
  if(number == 5){
    break;
  }
}

//continue statemenet (will reset the loop withoud looking further)
// this loop wil skip printing the number 6
int num = 1;

do{
  if(num == 6){
    num++;
    continue;
  }
  printf("%d ", num);
  num++;
}while(num < 10);
  
//switch statemen (skip for now) 
char let = "C"; 

switch(let){
  case "A": printf("very good") ;
            break;
  case "C": printf("very bad") ;
            break;
  default : printf("no score") ;
}

// ctype 
#include <ctype.h> 

int tuna = "a";
if (isalpha(tuna)) {
  printf("you chose a letter. \n") 
}
if (isdigit(tuna)) {
  printf("you chose a number") 
} 

//strcpy and strcat 
char hello[] = "hello ";
strcat(hello, "world") //adds world to the string  

char hello[] = "hello "
strcpy(hello, "hello world") //replaces the entire string 

//puts and gets 
char name[100];
puts("hello enter ur name");
gets(name);           //difference between scanf and gets, gets takes the entire string with space. 

//rounding up and down 
#include math 
float a = 5.5;
int b = ceil(a);
int c = floor(a);

//absoluut vallue 
#include <math.h> 
int a = 1900;
int b = 2000;
int c = a - b;
abs(c); //instead of negative 100 u get 100 to not get negative number which can crash program. 

//random 
int i;
int diceroll;

for (i=1; i < 100; i++) {
  diceroll = ( rand()%10) + 1;
  printf(" %d", diceroll);
} 

//int arrays
int meatballs[4] = {5, 6, 7, 8};

//int array example 2 
int hello[5];
scanf(" %d", &hello[0]) //the & sign allows u to select a number in the array??


//pointers (points to memory address) 
int tuna = 5;
printf(" %p \t %s \t %d", &tuna, "tuna", tuna)

//create a variable that stores the memory address 
int tuna; 
int * pTuna = &tuna; 
printf(" %p", pTuna);

//dereferncing a pointer (show the vallue of the variable of the pointer) 
printf(" %d", *pTuna);
*pTuna = 71; 

//user pointers to rename strings 
char * tuna = "hello";
puts(tuna) ;
tuna = "yes";
puts(tuna);

