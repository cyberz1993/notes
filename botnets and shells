#subprocess Popen
# to save the output and error you have to set both stdout and stderr to True or else the output will be printed and not saved 
command = subprocess.Popen("ipconfig /all).split(" "), stdout=subprocess.PIPE, stdout=subprocess.PIPE) 

#save the output and err outputs in the following variables 
out, err = command.communicate() 
print(out) 



#socket programming 
#first create a listening server 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
s.bind((ip, port)) 
s.listen(1)                                                 #the amount of connections it can accept 
client, address = s.accept() 

#now create a client that will connect to the server 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
s.connect((ip, port))

#now that we established a tcp connection we can start sending data, first it the client is expected to send data 
s.send(b"syn")                #all data send over the wire needs to be sent in byte format 

#the server will recieve the data and send data back to the client for the connection to continue 
s.recv(1024) 
s.send(b"ack") 

#now loop this process for the data exhcnage 
s.recv(1024) 
s.send("complete") 



#linux stuff 
#nmap 
nmap -sV <victim ip>        #scans version (scans open ports and version of the application/process running it) 
nmap -sS <victim ip>        #syn scan (only scans using the syn packet, not establish full connection, it is faster and stealthier) 
nmap -sF <victim ip>        #scan fin (used to bypass firewall protections) 
nmap -sX <victim ip>        #xmas scan 

#netcat 
netcat <target ip> <target port>    #starts a shell connection (ftpd2.3.4 ports 6200) 

#running simple http server 
python -m http.server 8080

#downloading file with wget 
wget <ip>:<port>/path



